input IData {
  json: String!
}

type OData {
  json: String!
}

interface BasicDoc {
  id: ID!
  rev: String!
}

type Doc implements BasicDoc {
  id: ID!
  rev: String!
  attributes: OData!
}

type Docs {
  items: [Doc]
  next: String
}

type Link {
  id1: ID!
  id2: ID!
}

type Links {
  items: [Link]
  next: String
}

type Mgr {
  type: String
  create(data: IData!): Doc
  get(id: ID!): Doc
  put(id: ID!, rev: String, data: IData!): Doc
  delete(id: ID!, rev: String): Boolean
  # all(limit: Int = 10, sortby: String, descending: Boolean = true): Docs
  # nextPages(pagesUrl: String): Docs
  # find(index: String!, selector: String!, sort: String, fields: string, limit: Int = 10: Docs
  # view(view: String, key: String, keys: String, start_key: String, end_key: String, descending: Boolean, group: Boolean = false, group_level: Int, include_docs: Boolean = true, limit: Int = 10): Docs
  # serach(keywords: [String]!, selector: String, sort: String, include_docs: Boolean, limit: Int = 10): Docs
  # link(type: String!, id: ID!, refID: ID!): Boolean
  # unlink(type: String!, id: ID!, refID: ID!): Boolean
  # allLinks(type: String!, id: ID!, limit: Int = 10, descending: Boolean = true): Links
  # nextLinks(linksUrl: String): Links
}

type Query {
  getMgr(type: String): Mgr
}

type Mutation {
  getMgr(type: String): Mgr
}
